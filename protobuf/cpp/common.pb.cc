// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PB {

namespace {

const ::google::protobuf::Descriptor* dt_get_common_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dt_get_common_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* common_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  common_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* dt_get_common_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dt_get_common_info_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DATA_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  dt_get_common_info_req_descriptor_ = file->message_type(0);
  static const int dt_get_common_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_req, id_),
  };
  dt_get_common_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dt_get_common_info_req_descriptor_,
      dt_get_common_info_req::default_instance_,
      dt_get_common_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dt_get_common_info_req));
  common_info_descriptor_ = file->message_type(1);
  static const int common_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_info, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_info, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_info, ri_),
  };
  common_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      common_info_descriptor_,
      common_info::default_instance_,
      common_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(common_info));
  dt_get_common_info_rsp_descriptor_ = file->message_type(2);
  static const int dt_get_common_info_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_rsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_rsp, oci_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_rsp, rci_),
  };
  dt_get_common_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dt_get_common_info_rsp_descriptor_,
      dt_get_common_info_rsp::default_instance_,
      dt_get_common_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dt_get_common_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dt_get_common_info_rsp));
  DATA_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dt_get_common_info_req_descriptor_, &dt_get_common_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    common_info_descriptor_, &common_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dt_get_common_info_rsp_descriptor_, &dt_get_common_info_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete dt_get_common_info_req::default_instance_;
  delete dt_get_common_info_req_reflection_;
  delete common_info::default_instance_;
  delete common_info_reflection_;
  delete dt_get_common_info_rsp::default_instance_;
  delete dt_get_common_info_rsp_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\002PB\"Y\n\026dt_get_common_info"
    "_req\0223\n\004type\030\001 \001(\0162\r.PB.DATA_TYPE:\026DT_GE"
    "T_COMMON_INFO_REQ\022\n\n\002id\030\002 \001(\005\"4\n\013common_"
    "info\022\014\n\004flag\030\001 \001(\010\022\013\n\003str\030\002 \001(\014\022\n\n\002ri\030\003 "
    "\003(\003\"\225\001\n\026dt_get_common_info_rsp\0223\n\004type\030\001"
    " \001(\0162\r.PB.DATA_TYPE:\026DT_GET_COMMON_INFO_"
    "RSP\022\n\n\002id\030\002 \001(\005\022\034\n\003oci\030\003 \001(\0132\017.PB.common"
    "_info\022\034\n\003rci\030\004 \003(\0132\017.PB.common_info*C\n\tD"
    "ATA_TYPE\022\032\n\026DT_GET_COMMON_INFO_REQ\020\000\022\032\n\026"
    "DT_GET_COMMON_INFO_RSP\020\001", 384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  dt_get_common_info_req::default_instance_ = new dt_get_common_info_req();
  common_info::default_instance_ = new common_info();
  dt_get_common_info_rsp::default_instance_ = new dt_get_common_info_rsp();
  dt_get_common_info_req::default_instance_->InitAsDefaultInstance();
  common_info::default_instance_->InitAsDefaultInstance();
  dt_get_common_info_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* DATA_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DATA_TYPE_descriptor_;
}
bool DATA_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int dt_get_common_info_req::kTypeFieldNumber;
const int dt_get_common_info_req::kIdFieldNumber;
#endif  // !_MSC_VER

dt_get_common_info_req::dt_get_common_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB.dt_get_common_info_req)
}

void dt_get_common_info_req::InitAsDefaultInstance() {
}

dt_get_common_info_req::dt_get_common_info_req(const dt_get_common_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB.dt_get_common_info_req)
}

void dt_get_common_info_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dt_get_common_info_req::~dt_get_common_info_req() {
  // @@protoc_insertion_point(destructor:PB.dt_get_common_info_req)
  SharedDtor();
}

void dt_get_common_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dt_get_common_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dt_get_common_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dt_get_common_info_req_descriptor_;
}

const dt_get_common_info_req& dt_get_common_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

dt_get_common_info_req* dt_get_common_info_req::default_instance_ = NULL;

dt_get_common_info_req* dt_get_common_info_req::New() const {
  return new dt_get_common_info_req;
}

void dt_get_common_info_req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<dt_get_common_info_req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dt_get_common_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB.dt_get_common_info_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::DATA_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::DATA_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB.dt_get_common_info_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB.dt_get_common_info_req)
  return false;
#undef DO_
}

void dt_get_common_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB.dt_get_common_info_req)
  // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_REQ];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB.dt_get_common_info_req)
}

::google::protobuf::uint8* dt_get_common_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB.dt_get_common_info_req)
  // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_REQ];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB.dt_get_common_info_req)
  return target;
}

int dt_get_common_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_REQ];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dt_get_common_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dt_get_common_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dt_get_common_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dt_get_common_info_req::MergeFrom(const dt_get_common_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dt_get_common_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dt_get_common_info_req::CopyFrom(const dt_get_common_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dt_get_common_info_req::IsInitialized() const {

  return true;
}

void dt_get_common_info_req::Swap(dt_get_common_info_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dt_get_common_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dt_get_common_info_req_descriptor_;
  metadata.reflection = dt_get_common_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int common_info::kFlagFieldNumber;
const int common_info::kStrFieldNumber;
const int common_info::kRiFieldNumber;
#endif  // !_MSC_VER

common_info::common_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB.common_info)
}

void common_info::InitAsDefaultInstance() {
}

common_info::common_info(const common_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB.common_info)
}

void common_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = false;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

common_info::~common_info() {
  // @@protoc_insertion_point(destructor:PB.common_info)
  SharedDtor();
}

void common_info::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void common_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* common_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return common_info_descriptor_;
}

const common_info& common_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

common_info* common_info::default_instance_ = NULL;

common_info* common_info::New() const {
  return new common_info;
}

void common_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    flag_ = false;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
  }
  ri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool common_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB.common_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional bytes str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ri;
        break;
      }

      // repeated int64 ri = 3;
      case 3: {
        if (tag == 24) {
         parse_ri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_ri())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ri())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ri;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB.common_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB.common_info)
  return false;
#undef DO_
}

void common_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB.common_info)
  // optional bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }

  // optional bytes str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->str(), output);
  }

  // repeated int64 ri = 3;
  for (int i = 0; i < this->ri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->ri(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB.common_info)
}

::google::protobuf::uint8* common_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB.common_info)
  // optional bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }

  // optional bytes str = 2;
  if (has_str()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->str(), target);
  }

  // repeated int64 ri = 3;
  for (int i = 0; i < this->ri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->ri(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB.common_info)
  return target;
}

int common_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // optional bytes str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str());
    }

  }
  // repeated int64 ri = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ri_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ri(i));
    }
    total_size += 1 * this->ri_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void common_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const common_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const common_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void common_info::MergeFrom(const common_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  ri_.MergeFrom(from.ri_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void common_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void common_info::CopyFrom(const common_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool common_info::IsInitialized() const {

  return true;
}

void common_info::Swap(common_info* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(str_, other->str_);
    ri_.Swap(&other->ri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata common_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = common_info_descriptor_;
  metadata.reflection = common_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dt_get_common_info_rsp::kTypeFieldNumber;
const int dt_get_common_info_rsp::kIdFieldNumber;
const int dt_get_common_info_rsp::kOciFieldNumber;
const int dt_get_common_info_rsp::kRciFieldNumber;
#endif  // !_MSC_VER

dt_get_common_info_rsp::dt_get_common_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB.dt_get_common_info_rsp)
}

void dt_get_common_info_rsp::InitAsDefaultInstance() {
  oci_ = const_cast< ::PB::common_info*>(&::PB::common_info::default_instance());
}

dt_get_common_info_rsp::dt_get_common_info_rsp(const dt_get_common_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB.dt_get_common_info_rsp)
}

void dt_get_common_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  id_ = 0;
  oci_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dt_get_common_info_rsp::~dt_get_common_info_rsp() {
  // @@protoc_insertion_point(destructor:PB.dt_get_common_info_rsp)
  SharedDtor();
}

void dt_get_common_info_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete oci_;
  }
}

void dt_get_common_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dt_get_common_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dt_get_common_info_rsp_descriptor_;
}

const dt_get_common_info_rsp& dt_get_common_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

dt_get_common_info_rsp* dt_get_common_info_rsp::default_instance_ = NULL;

dt_get_common_info_rsp* dt_get_common_info_rsp::New() const {
  return new dt_get_common_info_rsp;
}

void dt_get_common_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    id_ = 0;
    if (has_oci()) {
      if (oci_ != NULL) oci_->::PB::common_info::Clear();
    }
  }
  rci_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dt_get_common_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB.dt_get_common_info_rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_RSP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::DATA_TYPE_IsValid(value)) {
            set_type(static_cast< ::PB::DATA_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_oci;
        break;
      }

      // optional .PB.common_info oci = 3;
      case 3: {
        if (tag == 26) {
         parse_oci:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oci()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rci;
        break;
      }

      // repeated .PB.common_info rci = 4;
      case 4: {
        if (tag == 34) {
         parse_rci:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rci()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rci;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB.dt_get_common_info_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB.dt_get_common_info_rsp)
  return false;
#undef DO_
}

void dt_get_common_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB.dt_get_common_info_rsp)
  // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_RSP];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .PB.common_info oci = 3;
  if (has_oci()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oci(), output);
  }

  // repeated .PB.common_info rci = 4;
  for (int i = 0; i < this->rci_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rci(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB.dt_get_common_info_rsp)
}

::google::protobuf::uint8* dt_get_common_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB.dt_get_common_info_rsp)
  // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_RSP];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .PB.common_info oci = 3;
  if (has_oci()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->oci(), target);
  }

  // repeated .PB.common_info rci = 4;
  for (int i = 0; i < this->rci_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rci(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB.dt_get_common_info_rsp)
  return target;
}

int dt_get_common_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_RSP];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .PB.common_info oci = 3;
    if (has_oci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oci());
    }

  }
  // repeated .PB.common_info rci = 4;
  total_size += 1 * this->rci_size();
  for (int i = 0; i < this->rci_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rci(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dt_get_common_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dt_get_common_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dt_get_common_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dt_get_common_info_rsp::MergeFrom(const dt_get_common_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rci_.MergeFrom(from.rci_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_oci()) {
      mutable_oci()->::PB::common_info::MergeFrom(from.oci());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dt_get_common_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dt_get_common_info_rsp::CopyFrom(const dt_get_common_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dt_get_common_info_rsp::IsInitialized() const {

  return true;
}

void dt_get_common_info_rsp::Swap(dt_get_common_info_rsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(oci_, other->oci_);
    rci_.Swap(&other->rci_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dt_get_common_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dt_get_common_info_rsp_descriptor_;
  metadata.reflection = dt_get_common_info_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

// @@protoc_insertion_point(global_scope)
