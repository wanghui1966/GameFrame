// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class dt_get_common_info_req;
class common_info;
class dt_get_common_info_rsp;

enum DATA_TYPE {
  DT_GET_COMMON_INFO_REQ = 0,
  DT_GET_COMMON_INFO_RSP = 1
};
bool DATA_TYPE_IsValid(int value);
const DATA_TYPE DATA_TYPE_MIN = DT_GET_COMMON_INFO_REQ;
const DATA_TYPE DATA_TYPE_MAX = DT_GET_COMMON_INFO_RSP;
const int DATA_TYPE_ARRAYSIZE = DATA_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DATA_TYPE_descriptor();
inline const ::std::string& DATA_TYPE_Name(DATA_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DATA_TYPE_descriptor(), value);
}
inline bool DATA_TYPE_Parse(
    const ::std::string& name, DATA_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DATA_TYPE>(
    DATA_TYPE_descriptor(), name, value);
}
// ===================================================================

class dt_get_common_info_req : public ::google::protobuf::Message {
 public:
  dt_get_common_info_req();
  virtual ~dt_get_common_info_req();

  dt_get_common_info_req(const dt_get_common_info_req& from);

  inline dt_get_common_info_req& operator=(const dt_get_common_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dt_get_common_info_req& default_instance();

  void Swap(dt_get_common_info_req* other);

  // implements Message ----------------------------------------------

  dt_get_common_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dt_get_common_info_req& from);
  void MergeFrom(const dt_get_common_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_REQ];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::DATA_TYPE type() const;
  inline void set_type(::PB::DATA_TYPE value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.dt_get_common_info_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static dt_get_common_info_req* default_instance_;
};
// -------------------------------------------------------------------

class common_info : public ::google::protobuf::Message {
 public:
  common_info();
  virtual ~common_info();

  common_info(const common_info& from);

  inline common_info& operator=(const common_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const common_info& default_instance();

  void Swap(common_info* other);

  // implements Message ----------------------------------------------

  common_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const common_info& from);
  void MergeFrom(const common_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline bool flag() const;
  inline void set_flag(bool value);

  // optional bytes str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const void* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // repeated int64 ri = 3;
  inline int ri_size() const;
  inline void clear_ri();
  static const int kRiFieldNumber = 3;
  inline ::google::protobuf::int64 ri(int index) const;
  inline void set_ri(int index, ::google::protobuf::int64 value);
  inline void add_ri(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ri() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ri();

  // @@protoc_insertion_point(class_scope:PB.common_info)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* str_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ri_;
  bool flag_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static common_info* default_instance_;
};
// -------------------------------------------------------------------

class dt_get_common_info_rsp : public ::google::protobuf::Message {
 public:
  dt_get_common_info_rsp();
  virtual ~dt_get_common_info_rsp();

  dt_get_common_info_rsp(const dt_get_common_info_rsp& from);

  inline dt_get_common_info_rsp& operator=(const dt_get_common_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dt_get_common_info_rsp& default_instance();

  void Swap(dt_get_common_info_rsp* other);

  // implements Message ----------------------------------------------

  dt_get_common_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dt_get_common_info_rsp& from);
  void MergeFrom(const dt_get_common_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_RSP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB::DATA_TYPE type() const;
  inline void set_type(::PB::DATA_TYPE value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .PB.common_info oci = 3;
  inline bool has_oci() const;
  inline void clear_oci();
  static const int kOciFieldNumber = 3;
  inline const ::PB::common_info& oci() const;
  inline ::PB::common_info* mutable_oci();
  inline ::PB::common_info* release_oci();
  inline void set_allocated_oci(::PB::common_info* oci);

  // repeated .PB.common_info rci = 4;
  inline int rci_size() const;
  inline void clear_rci();
  static const int kRciFieldNumber = 4;
  inline const ::PB::common_info& rci(int index) const;
  inline ::PB::common_info* mutable_rci(int index);
  inline ::PB::common_info* add_rci();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::common_info >&
      rci() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::common_info >*
      mutable_rci();

  // @@protoc_insertion_point(class_scope:PB.dt_get_common_info_rsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_oci();
  inline void clear_has_oci();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 id_;
  ::PB::common_info* oci_;
  ::google::protobuf::RepeatedPtrField< ::PB::common_info > rci_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static dt_get_common_info_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// dt_get_common_info_req

// optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_REQ];
inline bool dt_get_common_info_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dt_get_common_info_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dt_get_common_info_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dt_get_common_info_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PB::DATA_TYPE dt_get_common_info_req::type() const {
  // @@protoc_insertion_point(field_get:PB.dt_get_common_info_req.type)
  return static_cast< ::PB::DATA_TYPE >(type_);
}
inline void dt_get_common_info_req::set_type(::PB::DATA_TYPE value) {
  assert(::PB::DATA_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PB.dt_get_common_info_req.type)
}

// optional int32 id = 2;
inline bool dt_get_common_info_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dt_get_common_info_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dt_get_common_info_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dt_get_common_info_req::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 dt_get_common_info_req::id() const {
  // @@protoc_insertion_point(field_get:PB.dt_get_common_info_req.id)
  return id_;
}
inline void dt_get_common_info_req::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PB.dt_get_common_info_req.id)
}

// -------------------------------------------------------------------

// common_info

// optional bool flag = 1;
inline bool common_info::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void common_info::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void common_info::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void common_info::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool common_info::flag() const {
  // @@protoc_insertion_point(field_get:PB.common_info.flag)
  return flag_;
}
inline void common_info::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:PB.common_info.flag)
}

// optional bytes str = 2;
inline bool common_info::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void common_info::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void common_info::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void common_info::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& common_info::str() const {
  // @@protoc_insertion_point(field_get:PB.common_info.str)
  return *str_;
}
inline void common_info::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:PB.common_info.str)
}
inline void common_info::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB.common_info.str)
}
inline void common_info::set_str(const void* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB.common_info.str)
}
inline ::std::string* common_info::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB.common_info.str)
  return str_;
}
inline ::std::string* common_info::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void common_info::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB.common_info.str)
}

// repeated int64 ri = 3;
inline int common_info::ri_size() const {
  return ri_.size();
}
inline void common_info::clear_ri() {
  ri_.Clear();
}
inline ::google::protobuf::int64 common_info::ri(int index) const {
  // @@protoc_insertion_point(field_get:PB.common_info.ri)
  return ri_.Get(index);
}
inline void common_info::set_ri(int index, ::google::protobuf::int64 value) {
  ri_.Set(index, value);
  // @@protoc_insertion_point(field_set:PB.common_info.ri)
}
inline void common_info::add_ri(::google::protobuf::int64 value) {
  ri_.Add(value);
  // @@protoc_insertion_point(field_add:PB.common_info.ri)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
common_info::ri() const {
  // @@protoc_insertion_point(field_list:PB.common_info.ri)
  return ri_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
common_info::mutable_ri() {
  // @@protoc_insertion_point(field_mutable_list:PB.common_info.ri)
  return &ri_;
}

// -------------------------------------------------------------------

// dt_get_common_info_rsp

// optional .PB.DATA_TYPE type = 1 [default = DT_GET_COMMON_INFO_RSP];
inline bool dt_get_common_info_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dt_get_common_info_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dt_get_common_info_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dt_get_common_info_rsp::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PB::DATA_TYPE dt_get_common_info_rsp::type() const {
  // @@protoc_insertion_point(field_get:PB.dt_get_common_info_rsp.type)
  return static_cast< ::PB::DATA_TYPE >(type_);
}
inline void dt_get_common_info_rsp::set_type(::PB::DATA_TYPE value) {
  assert(::PB::DATA_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PB.dt_get_common_info_rsp.type)
}

// optional int32 id = 2;
inline bool dt_get_common_info_rsp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dt_get_common_info_rsp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dt_get_common_info_rsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dt_get_common_info_rsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 dt_get_common_info_rsp::id() const {
  // @@protoc_insertion_point(field_get:PB.dt_get_common_info_rsp.id)
  return id_;
}
inline void dt_get_common_info_rsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PB.dt_get_common_info_rsp.id)
}

// optional .PB.common_info oci = 3;
inline bool dt_get_common_info_rsp::has_oci() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dt_get_common_info_rsp::set_has_oci() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dt_get_common_info_rsp::clear_has_oci() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dt_get_common_info_rsp::clear_oci() {
  if (oci_ != NULL) oci_->::PB::common_info::Clear();
  clear_has_oci();
}
inline const ::PB::common_info& dt_get_common_info_rsp::oci() const {
  // @@protoc_insertion_point(field_get:PB.dt_get_common_info_rsp.oci)
  return oci_ != NULL ? *oci_ : *default_instance_->oci_;
}
inline ::PB::common_info* dt_get_common_info_rsp::mutable_oci() {
  set_has_oci();
  if (oci_ == NULL) oci_ = new ::PB::common_info;
  // @@protoc_insertion_point(field_mutable:PB.dt_get_common_info_rsp.oci)
  return oci_;
}
inline ::PB::common_info* dt_get_common_info_rsp::release_oci() {
  clear_has_oci();
  ::PB::common_info* temp = oci_;
  oci_ = NULL;
  return temp;
}
inline void dt_get_common_info_rsp::set_allocated_oci(::PB::common_info* oci) {
  delete oci_;
  oci_ = oci;
  if (oci) {
    set_has_oci();
  } else {
    clear_has_oci();
  }
  // @@protoc_insertion_point(field_set_allocated:PB.dt_get_common_info_rsp.oci)
}

// repeated .PB.common_info rci = 4;
inline int dt_get_common_info_rsp::rci_size() const {
  return rci_.size();
}
inline void dt_get_common_info_rsp::clear_rci() {
  rci_.Clear();
}
inline const ::PB::common_info& dt_get_common_info_rsp::rci(int index) const {
  // @@protoc_insertion_point(field_get:PB.dt_get_common_info_rsp.rci)
  return rci_.Get(index);
}
inline ::PB::common_info* dt_get_common_info_rsp::mutable_rci(int index) {
  // @@protoc_insertion_point(field_mutable:PB.dt_get_common_info_rsp.rci)
  return rci_.Mutable(index);
}
inline ::PB::common_info* dt_get_common_info_rsp::add_rci() {
  // @@protoc_insertion_point(field_add:PB.dt_get_common_info_rsp.rci)
  return rci_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::common_info >&
dt_get_common_info_rsp::rci() const {
  // @@protoc_insertion_point(field_list:PB.dt_get_common_info_rsp.rci)
  return rci_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::common_info >*
dt_get_common_info_rsp::mutable_rci() {
  // @@protoc_insertion_point(field_mutable_list:PB.dt_get_common_info_rsp.rci)
  return &rci_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PB::DATA_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::DATA_TYPE>() {
  return ::PB::DATA_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
