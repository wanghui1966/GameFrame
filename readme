test目录下为所有测试代码

# 1. 日志类
一个使用log4cplus搭建的日志系统

源码：
base/log/log.h
base/log/log.cpp
配置文件：
config/log.properties
日志输出文件
log/server/
log/groot/
测试代码：
test/log4cplus_test.cpp

# 2. 单例类
基类，从此类继承可以保证单例

源码：
base/singleton.h

测试代码：
test/singleton_test.cpp

# 3. 线程池
一个线程池的实现

源码：
base/task.h 为任务基类，所有需要在线程池中运行的任务均应从此类继承，并重载Run函数
base/work.h base/worker.cpp 为工作线程类，其绑定一个线程，并持有一个任务的指针，如果当前处于空闲状态线程会wait，等待有新任务时notify
base/thread_pool.h base/thread_pool.cpp 为线程池基类，维护一个工作线程列表，拥有AddWork方法，加入新任务的时候即调用此方法，使用取模的方式来将任务分配任务给工作线程，保证任务平均分配
base/async_worker_manager.h 为线程池的一个实现类，为单例，保证好调用

测试代码：
test/task_test.h
test/thread_pool_test.cpp

# 4. 函数线程池
> 一个线程池的实现，使用c++11的新特性，std::funture，std::async等

源码：
base/func_thread_pool/func_thread_pool.h 为线程池的实现，由于lambda表达式在模板实例化有问题，因为.h和.cpp不能分开

测试源码：
test/func_thread_pool_test.cpp

# 5. protocbuf
PB的接入

源码：
protocbuf/proto/common.proto 为pb定义文件
protocbuf/gen_proto.sh 为proto文件转化为cpp文件
protocbuf/cpp/* 为pb生成文件

测试代码：
test/protobuf_test.cpp

# 6. 线程安全容器
带锁的容器，线程安全容器

源码：
base/thread_safe_container/ts_queue.h

测试代码：
test/thread_safe_container_test.cpp


# 7. 系列化
结构体 或 pb 系列化

源码：
base/packet/packet.h
base/packet/packet.cpp

测试代码：
test/packet_test.cpp

# 8. 带心跳的对象池
一个对象池的实现，带心跳

源码：
base/object_pool/object_pool_manager.h
base/object_pool/object.h

测试代码：
test/object_pool_test.cpp

# 9. 定时器
定时器的实现，可支持一次性任务和循环任务
改进(可跟线程池结合使用)

源码：
base/timer/timer.h

测试代码：
test/timer_test.cpp

# 10. 共享内存

源码：
base/shm/shm_data.h
base/shm/shm_manager.h

测试代码：
test/timer_test.cpp

# 11. 热更
使用so文件进行热更的实现

源码：
base/patch.h

测试代码：
test/patch_test.cpp
test/patch_wind.h
test/patch_wind.cpp
test/patch.cpp

# 12. redis
使用开源hiredis对redis进行封装成一个redis连接池

redis配置：redis/redis.conf
启动redis服务器脚本：redis/start_server.sh
停止redis服务器脚本：redis/stop_server.sh
启动redis客户端脚本：redis/client.sh

源码：
base/redis/redis_manager.h
base/redis/redis_manager.cpp

测试代码：
test/redis_test.cpp

# 13. 环形缓冲区
一个简单的环形缓冲区

源码：
base/circle_buffer/circle_buffer.h
base/circle_buffer/circle_buffer.cpp

测试代码：
test/circle_buffer_test.cpp

# 14. epoll网络收发包
epoll实现的服务器逻辑
支持多客户端连接，使用环形缓冲区作为session的缓存，可以处理tcp的拆包/粘包
pb工厂

源码：
base/net/net_manager.h
base/net/net_manager.cpp
base/net/session.h
base/net/session.cpp
base/circle_buffer/circle_buffer.h
base/circle_buffer/circle_buffer.cpp
base/game_packet.h
base/game_command.h
base/game_command.cpp
protobuf/proto/protobuf_factory.h
protobuf/proto/protobuf_factory.cpp

测试源码：
test/net_server_test.cpp
test/net_client_test.cpp

# 15. 雪花算法snow_flake
雪花算法的实现

源码：
base/snow_flake.h

测试源码：
test/snow_flake_test.cpp

# 16. redis实现的分布式锁
解锁可以用evalsha实现原子操作，但貌似没有必要

源码：
base/redis/redis_manager.h
base/redis/redis_manager.cpp
base/redis/redis_lock.h
base/redis/redis_lock.cpp

测试源码：
test/redis_lock_test.cpp

# 17. redis封装eval和evalsha
redis的eval和evalsha封装的库

源码：
base/redis/redis_manager.h
base/redis/redis_manager.cpp
base/redis/redis_script_manager.h
base/redis/redis_script_manager.cpp

测试源码：
test/redis_script_test.cpp
